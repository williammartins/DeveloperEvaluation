// <auto-generated />
using System;
using DeveloperStore.Sales.Infrastructure.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace DeveloperStore.Sales.Infrastructure.Migrations
{
    [DbContext(typeof(SalesDbContext))]
    partial class SalesDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.7")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("DeveloperStore.Sales.Domain.Sale", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("BranchId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("CustomerId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("IsCancelled")
                        .HasColumnType("bit");

                    b.Property<DateTime>("SaleDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("SaleNumber")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("SaleNumber")
                        .IsUnique();

                    b.ToTable("Sales");
                });

            modelBuilder.Entity("DeveloperStore.Sales.Domain.SaleItem", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("IsCancelled")
                        .HasColumnType("bit");

                    b.Property<Guid>("ProductId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("SaleId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("SaleId");

                    b.ToTable("SaleItems");
                });

            modelBuilder.Entity("DeveloperStore.Sales.Domain.Sale", b =>
                {
                    b.OwnsOne("DeveloperStore.Sales.Domain.ValueObjects.Money", "TotalAmount", b1 =>
                        {
                            b1.Property<Guid>("SaleId")
                                .HasColumnType("uniqueidentifier");

                            b1.Property<decimal>("Value")
                                .HasColumnType("decimal(18,2)")
                                .HasColumnName("TotalAmount");

                            b1.HasKey("SaleId");

                            b1.ToTable("Sales");

                            b1.WithOwner()
                                .HasForeignKey("SaleId");
                        });

                    b.Navigation("TotalAmount")
                        .IsRequired();
                });

            modelBuilder.Entity("DeveloperStore.Sales.Domain.SaleItem", b =>
                {
                    b.HasOne("DeveloperStore.Sales.Domain.Sale", "Sale")
                        .WithMany("Items")
                        .HasForeignKey("SaleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.OwnsOne("DeveloperStore.Sales.Domain.ValueObjects.Money", "Discount", b1 =>
                        {
                            b1.Property<Guid>("SaleItemId")
                                .HasColumnType("uniqueidentifier");

                            b1.Property<decimal>("Value")
                                .HasColumnType("decimal(18,2)")
                                .HasColumnName("Discount");

                            b1.HasKey("SaleItemId");

                            b1.ToTable("SaleItems");

                            b1.WithOwner()
                                .HasForeignKey("SaleItemId");
                        });

                    b.OwnsOne("DeveloperStore.Sales.Domain.ValueObjects.Money", "TotalItemAmount", b1 =>
                        {
                            b1.Property<Guid>("SaleItemId")
                                .HasColumnType("uniqueidentifier");

                            b1.Property<decimal>("Value")
                                .HasColumnType("decimal(18,2)")
                                .HasColumnName("TotalItemAmount");

                            b1.HasKey("SaleItemId");

                            b1.ToTable("SaleItems");

                            b1.WithOwner()
                                .HasForeignKey("SaleItemId");
                        });

                    b.OwnsOne("DeveloperStore.Sales.Domain.ValueObjects.Money", "UnitPrice", b1 =>
                        {
                            b1.Property<Guid>("SaleItemId")
                                .HasColumnType("uniqueidentifier");

                            b1.Property<decimal>("Value")
                                .HasColumnType("decimal(18,2)")
                                .HasColumnName("UnitPrice");

                            b1.HasKey("SaleItemId");

                            b1.ToTable("SaleItems");

                            b1.WithOwner()
                                .HasForeignKey("SaleItemId");
                        });

                    b.OwnsOne("DeveloperStore.Sales.Domain.ValueObjects.Quantity", "Quantity", b1 =>
                        {
                            b1.Property<Guid>("SaleItemId")
                                .HasColumnType("uniqueidentifier");

                            b1.Property<int>("Value")
                                .HasColumnType("int")
                                .HasColumnName("Quantity");

                            b1.HasKey("SaleItemId");

                            b1.ToTable("SaleItems");

                            b1.WithOwner()
                                .HasForeignKey("SaleItemId");
                        });

                    b.Navigation("Discount")
                        .IsRequired();

                    b.Navigation("Quantity")
                        .IsRequired();

                    b.Navigation("Sale");

                    b.Navigation("TotalItemAmount")
                        .IsRequired();

                    b.Navigation("UnitPrice")
                        .IsRequired();
                });

            modelBuilder.Entity("DeveloperStore.Sales.Domain.Sale", b =>
                {
                    b.Navigation("Items");
                });
#pragma warning restore 612, 618
        }
    }
}
